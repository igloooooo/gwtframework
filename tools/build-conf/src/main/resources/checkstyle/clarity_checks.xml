<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!--
  ***Note***
  there are two checkstyles config files that need to be kept in sync.
  this is because ant and maven are running them from different locations,
  the only difference between the two files is the path to the
  suppression filter file.

  Modified from the sun_checks that comes with the checkstyle distribution

  Originally based on the sun coding standards + some additional checks.
-->

<module name="Checker">
    <module name="SuppressionFilter">
        <!--<property name="file" value="suppressions.xml"/>-->
	    <!--<property name="file" value="target/build-conf/checkstyle/suppressions.xml"/>-->
	    <!--<property name="file" value="build-conf/src/main/resources/checkstyle/suppressions.xml"/>-->
    </module>


    <!--
        Removed checks
        ==============
    - single level of these is ok, nested is not
    <module name="AvoidInlineConditionals"/>


    - magic numbers need to be checked by a live reviewer, as in a fair amoo
    <module name="MagicNumber"/>

    - this is standard practice  (we use this.fname = fname)
    <module name="HiddenField"/>

    <module name="HideUtilityClassConstructor"/>  - fair enough check but not a lot of value for the error it prevents

    - removed javadoc auto inspection. Agreed that the best approach is to javadoc stuff that the
    code reviewer (as in a real person) suggests needs documentation
    <module name="JavadocVariable"/> - decided on javadoc for class and public methods only
    <module name="JavadocMethod"/>
    <module name="JavadocType"/>


    - not sure of the value of this one, except to not annoy emacs users?
    <module name="GenericIllegalRegexp">
            <property name="format" value="\s+$"/>
            <property name="message" value="Line has trailing spaces."/>
        </module>

    - removed checks on final parameters - readability vs safety issues.
    <module name="FinalParameters"/>

    - just don't care about full stops all that much
    <module name="JavadocStyle"/>

    - I disagree with the premise behind this check, not all classes have to be designed
     for extension, especially in an application (as opposed to a library) code base.
    <module name="DesignForExtension"/>
    -->

    <!-- Checks that a package.html file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#PackageHtml
    <module name="PackageHtml"/>
    -->

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile
    <module name="NewlineAtEndOfFile"/>
    -->

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>


    <module name="TreeWalker">
        <!-- fix for http://jira.codehaus.org/browse/MCHECKSTYLE-159?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel -->
        <property name="cacheFile" value="target/cachefile.tmp"/>

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>

        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
        <!-- <module name="Header">                            -->
        <!-- The follow property value demonstrates the ability     -->
        <!-- to have access to ANT properties. In this case it uses -->
        <!-- the ${basedir} property to allow Checkstyle to be run  -->
        <!-- from any directory within a project. See property      -->
        <!-- expansion,                                             -->
        <!-- http://checkstyle.sf.net/config.html#properties        -->
        <!-- <property                                              -->
        <!--     name="headerFile"                                  -->
        <!--     value="${basedir}/java.header"/>                   -->
        <!-- </module> -->

        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/>
        <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <!-- Checks for Override annotation -->
        <!-- <module name="MissingOverride">
           <property name="javaFiveCompatibility"
             value="true"/>
       </module> -->


        <module name="LineLength">
            <property name="max" value="120"/>
        </module>

        <module name="MethodLength"/>
        <module name="ParameterNumber">
            <property name="max" value="8"/>
            <property name="tokens" value="METHOD_DEF"/>
        </module>

        <module name="ParameterNumber">
            <property name="max" value="12"/>
            <property name="tokens" value="CTOR_DEF"/>
        </module>


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad">
            <property name="option" value="space"/>
        </module>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="TYPECAST"/>
        </module>

        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap">
            <property name="tokens"
                      value="BAND, BOR, BSR, BXOR, COLON, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, QUESTION, SL, SR, STAR"/>
            <property name="option" value="nl"/>
        </module>
        <module name="OperatorWrap">
            <property name="tokens" value="PLUS"/>
            <property name="option" value="eol"/>
        </module>


        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <!--<module name="TabCharacter"/>-->
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI"/>
        </module>
        <module name="WhitespaceAround">
            <property name="tokens"
                      value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
        </module>


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock">
            <property name="option" value="text"/>
            <property name="tokens" value="LITERAL_CATCH"/>
        </module>

        <module name="LeftCurly">
            <property name="option" value="nl"/>
        </module>

        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE"/>
        </module>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->

        <!-- MY FAVOURITE -->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>

        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment"/>

        <module name="MissingSwitchDefault"/>
        <!-- removed redundant throws - low value check, plus causing havoc in build due to the
        way it is implemented (needs access to compiled classes -->
        <!--<module name="RedundantThrows"/>-->
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->

        <module name="FinalClass"/>


        <!-- Sometimes and interface is empty... -->
        <!-- <module name="InterfaceIsType"/> -->

        <module name="VisibilityModifier"/>


        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
        <module name="ParameterAssignment"/>

        <module name="UpperEll"/>
        <module name="StringLiteralEquality"/>

        <!-- checks for printlns -->
        <module name="Regexp">
            <property name="format" value="System\.out\.print"/>
            <property name="illegalPattern" value="true"/>
            <property name="ignoreComments" value="true"/>
        </module>

        <module name="Regexp">
            <property name="format" value="System\.err\.print"/>
            <property name="illegalPattern" value="true"/>
            <property name="ignoreComments" value="true"/>
        </module>

        <!--<module name="com.clarity.checkstyle.checks.TransactionTypeSpecifiedOnRequest" />-->

    </module>

</module>
